package frontend.bases;

import backend.interfaces.ITable;
import backend.interfaces.IJanelaConsulta;
import backend.interfaces.ICallerJanelaCriarInterface;
import backend.Aplicacao;
import backend.Serializacao;
import backend.bases.EntidadeBase;
import backend.entidades.Medico;
import backend.entidades.Paciente;
import backend.interfaces.IManager;
import backend.managers.ManagerPaciente;
import frontend.janelas.JanelaCriarEnfermaria;
import frontend.janelas.JanelaCriarEquipamento;
import frontend.janelas.JanelaCriarPaciente;
import frontend.janelas.JanelaCriarProfissionalSaude;
import frontend.tabelas.TabelaEnfermaria;
import frontend.tabelas.TabelaEquipamento;
import frontend.tabelas.TabelaHospital;
import frontend.tabelas.TabelaPaciente;
import frontend.tabelas.TabelaProfissionalSaude;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.Calendar;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JOptionPane;
import javax.swing.JTabbedPane;
import javax.swing.JTable;
import javax.swing.table.AbstractTableModel;

public abstract class JanelaBase extends javax.swing.JDialog implements ICallerJanelaCriarInterface, IJanelaConsulta {

    protected final Aplicacao app;
    protected final Serializacao serializacao;

    /**
     * Seleçoes
     */
    protected String hospitalSelecionado;
    protected String enfermariaSelecionada;
    protected String medicoSelecionado;

    private final int tabEquipamentoIndex = 0;
    private final int tabProfissionalSaudeIndex = 1;
    private final int tabPacienteIndex = 2;

    /**
     * Creates new form JanelaConsultaEnfermaria
     *
     * @param app
     * @param serializacao
     */
    public JanelaBase(Aplicacao app, Serializacao serializacao, String tituloJanela) {
        this.app = app;
        this.serializacao = serializacao;

        initComponents();

        // começar por pôr todos os botoes invisiveis
        esconderBotoes();

        // tabs
        esconderTabs();

        // menus
        esconderMenus();

        // definir os eventos dos botoes e tabelaPane
        setEventos();

        // titulo da janela
        setTitle(tituloJanela);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        contentor = new javax.swing.JPanel();
        botoes = new javax.swing.JPanel();
        botaoCriar = new javax.swing.JButton();
        botaoEditar = new javax.swing.JButton();
        botaoRemover = new javax.swing.JButton();
        botaoDetalhe = new javax.swing.JButton();
        tabs = new javax.swing.JPanel();
        tabTabela = new javax.swing.JTabbedPane();
        labelDetalhe = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        menuEquipamento = new javax.swing.JMenu();
        menuNovoEquipamento = new javax.swing.JMenuItem();
        menuEditarEquipamento = new javax.swing.JMenuItem();
        menuRemoverEquipamento = new javax.swing.JMenuItem();
        menuProfissionalSaude = new javax.swing.JMenu();
        menuNovoMedico = new javax.swing.JMenuItem();
        menuNovoEnfermeiro = new javax.swing.JMenuItem();
        menuEditarProfissionalSaude = new javax.swing.JMenuItem();
        menuRemoverProfissionalSaude = new javax.swing.JMenuItem();
        menuPaciente = new javax.swing.JMenu();
        menuNovoPaciente = new javax.swing.JMenuItem();
        menuEditarPaciente = new javax.swing.JMenuItem();
        menuRemoverPaciente = new javax.swing.JMenuItem();
        menuDarAlta = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        botaoCriar.setText("Criar");
        botaoCriar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                botaoCriarMouseClicked(evt);
            }
        });
        botaoCriar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoCriarActionPerformed(evt);
            }
        });

        botaoEditar.setText("Editar");
        botaoEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoEditarActionPerformed(evt);
            }
        });

        botaoRemover.setText("Remover linha");
        botaoRemover.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                botaoRemoverMouseClicked(evt);
            }
        });
        botaoRemover.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoRemoverActionPerformed(evt);
            }
        });

        botaoDetalhe.setText("Detalhe");
        botaoDetalhe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoDetalheActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout botoesLayout = new javax.swing.GroupLayout(botoes);
        botoes.setLayout(botoesLayout);
        botoesLayout.setHorizontalGroup(
            botoesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(botoesLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(botaoCriar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(botaoEditar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(botaoDetalhe)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 348, Short.MAX_VALUE)
                .addComponent(botaoRemover)
                .addGap(20, 20, 20))
        );
        botoesLayout.setVerticalGroup(
            botoesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(botoesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(botaoCriar)
                .addComponent(botaoDetalhe)
                .addComponent(botaoEditar)
                .addComponent(botaoRemover))
        );

        javax.swing.GroupLayout tabsLayout = new javax.swing.GroupLayout(tabs);
        tabs.setLayout(tabsLayout);
        tabsLayout.setHorizontalGroup(
            tabsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tabTabela, javax.swing.GroupLayout.PREFERRED_SIZE, 750, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        tabsLayout.setVerticalGroup(
            tabsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tabTabela, javax.swing.GroupLayout.DEFAULT_SIZE, 276, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout contentorLayout = new javax.swing.GroupLayout(contentor);
        contentor.setLayout(contentorLayout);
        contentorLayout.setHorizontalGroup(
            contentorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(contentorLayout.createSequentialGroup()
                .addGroup(contentorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(contentorLayout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(tabs, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(contentorLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(botoes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        contentorLayout.setVerticalGroup(
            contentorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(contentorLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(botoes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tabs, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        labelDetalhe.setBackground(new java.awt.Color(255, 255, 255));
        labelDetalhe.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        labelDetalhe.setForeground(new java.awt.Color(153, 153, 153));
        labelDetalhe.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        labelDetalhe.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));

        menuEquipamento.setText("Equipamentos");

        menuNovoEquipamento.setText("Adicionar");
        menuNovoEquipamento.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                menuNovoEquipamentoMouseClicked(evt);
            }
        });
        menuNovoEquipamento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuNovoEquipamentoActionPerformed(evt);
            }
        });
        menuEquipamento.add(menuNovoEquipamento);

        menuEditarEquipamento.setText("Editar");
        menuEditarEquipamento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuEditarEquipamentoActionPerformed(evt);
            }
        });
        menuEquipamento.add(menuEditarEquipamento);

        menuRemoverEquipamento.setText("Remover");
        menuRemoverEquipamento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuRemoverEquipamentoActionPerformed(evt);
            }
        });
        menuEquipamento.add(menuRemoverEquipamento);

        jMenuBar1.add(menuEquipamento);

        menuProfissionalSaude.setText("Profissionais de Saúde");

        menuNovoMedico.setText("Adicionar Médico");
        menuNovoMedico.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                menuNovoMedicoMouseClicked(evt);
            }
        });
        menuNovoMedico.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuNovoMedicoActionPerformed(evt);
            }
        });
        menuProfissionalSaude.add(menuNovoMedico);

        menuNovoEnfermeiro.setText("Adicionar Enfermeiro");
        menuNovoEnfermeiro.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                menuNovoEnfermeiroMouseClicked(evt);
            }
        });
        menuNovoEnfermeiro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuNovoEnfermeiroActionPerformed(evt);
            }
        });
        menuProfissionalSaude.add(menuNovoEnfermeiro);

        menuEditarProfissionalSaude.setText("Editar");
        menuEditarProfissionalSaude.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuEditarProfissionalSaudeActionPerformed(evt);
            }
        });
        menuProfissionalSaude.add(menuEditarProfissionalSaude);

        menuRemoverProfissionalSaude.setText("Remover");
        menuRemoverProfissionalSaude.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuRemoverProfissionalSaudeActionPerformed(evt);
            }
        });
        menuProfissionalSaude.add(menuRemoverProfissionalSaude);

        jMenuBar1.add(menuProfissionalSaude);

        menuPaciente.setText("Paciente");

        menuNovoPaciente.setText("Adicionar");
        menuNovoPaciente.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                menuNovoPacienteMouseClicked(evt);
            }
        });
        menuNovoPaciente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuNovoPacienteActionPerformed(evt);
            }
        });
        menuPaciente.add(menuNovoPaciente);

        menuEditarPaciente.setText("Editar");
        menuEditarPaciente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuEditarPacienteActionPerformed(evt);
            }
        });
        menuPaciente.add(menuEditarPaciente);

        menuRemoverPaciente.setText("Remover");
        menuRemoverPaciente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuRemoverPacienteActionPerformed(evt);
            }
        });
        menuPaciente.add(menuRemoverPaciente);

        menuDarAlta.setText("Dar alta a paciente");
        menuDarAlta.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                menuDarAltaMouseClicked(evt);
            }
        });
        menuDarAlta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuDarAltaActionPerformed(evt);
            }
        });
        menuPaciente.add(menuDarAlta);

        jMenuBar1.add(menuPaciente);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(labelDetalhe, javax.swing.GroupLayout.PREFERRED_SIZE, 750, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(20, 20, 20))
                    .addComponent(contentor, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(labelDetalhe, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(contentor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void botaoCriarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_botaoCriarMouseClicked

    }//GEN-LAST:event_botaoCriarMouseClicked

    private void botaoCriarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoCriarActionPerformed

    }//GEN-LAST:event_botaoCriarActionPerformed

    private void botaoEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoEditarActionPerformed

    }//GEN-LAST:event_botaoEditarActionPerformed

    private void botaoRemoverMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_botaoRemoverMouseClicked
        remover((ITable) getTabTabela().getSelectedComponent());
    }//GEN-LAST:event_botaoRemoverMouseClicked

    private void botaoDetalheActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoDetalheActionPerformed

    }//GEN-LAST:event_botaoDetalheActionPerformed

    private void menuNovoEquipamentoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_menuNovoEquipamentoMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_menuNovoEquipamentoMouseClicked

    private void menuNovoEquipamentoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuNovoEquipamentoActionPerformed
        adicionarEquipamento();
    }//GEN-LAST:event_menuNovoEquipamentoActionPerformed

    private void menuEditarEquipamentoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuEditarEquipamentoActionPerformed
        editarEquipamento();
    }//GEN-LAST:event_menuEditarEquipamentoActionPerformed

    private void menuNovoMedicoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_menuNovoMedicoMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_menuNovoMedicoMouseClicked

    private void menuNovoMedicoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuNovoMedicoActionPerformed
        adicionarMedico();
    }//GEN-LAST:event_menuNovoMedicoActionPerformed

    private void menuEditarProfissionalSaudeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuEditarProfissionalSaudeActionPerformed
        editarProfissionalSaude();
    }//GEN-LAST:event_menuEditarProfissionalSaudeActionPerformed

    private void menuRemoverEquipamentoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuRemoverEquipamentoActionPerformed
        removerEquipamento();
    }//GEN-LAST:event_menuRemoverEquipamentoActionPerformed

    private void menuNovoEnfermeiroMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_menuNovoEnfermeiroMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_menuNovoEnfermeiroMouseClicked

    private void menuNovoEnfermeiroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuNovoEnfermeiroActionPerformed
        adicionarEnfermeiro();
    }//GEN-LAST:event_menuNovoEnfermeiroActionPerformed

    private void menuNovoPacienteMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_menuNovoPacienteMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_menuNovoPacienteMouseClicked

    private void menuNovoPacienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuNovoPacienteActionPerformed
        adicionarPaciente();
    }//GEN-LAST:event_menuNovoPacienteActionPerformed

    private void menuEditarPacienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuEditarPacienteActionPerformed
        editarPaciente();
    }//GEN-LAST:event_menuEditarPacienteActionPerformed

    private void menuRemoverPacienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuRemoverPacienteActionPerformed
        removerPaciente();
    }//GEN-LAST:event_menuRemoverPacienteActionPerformed

    private void menuDarAltaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_menuDarAltaMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_menuDarAltaMouseClicked

    private void menuDarAltaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuDarAltaActionPerformed
        darAltaPaciente();
    }//GEN-LAST:event_menuDarAltaActionPerformed

    private void menuRemoverProfissionalSaudeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuRemoverProfissionalSaudeActionPerformed
        removerProfissionalSaude();
    }//GEN-LAST:event_menuRemoverProfissionalSaudeActionPerformed

    private void botaoRemoverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoRemoverActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_botaoRemoverActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton botaoCriar;
    private javax.swing.JButton botaoDetalhe;
    private javax.swing.JButton botaoEditar;
    private javax.swing.JButton botaoRemover;
    private javax.swing.JPanel botoes;
    private javax.swing.JPanel contentor;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JLabel labelDetalhe;
    private javax.swing.JMenuItem menuDarAlta;
    private javax.swing.JMenuItem menuEditarEquipamento;
    private javax.swing.JMenuItem menuEditarPaciente;
    private javax.swing.JMenuItem menuEditarProfissionalSaude;
    private javax.swing.JMenu menuEquipamento;
    private javax.swing.JMenuItem menuNovoEnfermeiro;
    private javax.swing.JMenuItem menuNovoEquipamento;
    private javax.swing.JMenuItem menuNovoMedico;
    private javax.swing.JMenuItem menuNovoPaciente;
    private javax.swing.JMenu menuPaciente;
    private javax.swing.JMenu menuProfissionalSaude;
    private javax.swing.JMenuItem menuRemoverEquipamento;
    private javax.swing.JMenuItem menuRemoverPaciente;
    private javax.swing.JMenuItem menuRemoverProfissionalSaude;
    private javax.swing.JTabbedPane tabTabela;
    private javax.swing.JPanel tabs;
    // End of variables declaration//GEN-END:variables

    @Override
    public void setTextoDetalhe() {
        // para as janelas que nao precisam de ter texto no detalhe
    }

    private void adicionarEnfermaria() {
        try {
            JanelaCriarEnfermaria janela = new JanelaCriarEnfermaria(this, app, getHospitalSelecionado(), null);
            janela.setVisible(true);
        } catch (Exception ex) {
            mostrarAviso(ex.getMessage());
        }
    }

    private void adicionarPaciente() {
        try {
            JanelaCriarPaciente janela = new JanelaCriarPaciente(this, app, hospitalSelecionado, enfermariaSelecionada, null);
            janela.setVisible(true);
        } catch (Exception ex) {
            mostrarAviso(ex.getMessage());
        }
    }

    protected void editarPaciente() {
        try {
            ITable tabelaPane = ((ITable) getTabTabela().getComponentAt(tabPacienteIndex));
            validarSeExisteSelecao(tabelaPane.getTabela(), false);
            int rowIndex = tabelaPane.getLinhaSelecionada();
            String codigo = (String) tabelaPane.getTabela().getModel().getValueAt(rowIndex, tabelaPane.getColunaCodigo());

            JanelaCriarPaciente janela = new JanelaCriarPaciente(this, app, hospitalSelecionado, enfermariaSelecionada, codigo);
            janela.setVisible(true);
        } catch (Aplicacao.HospitalNaoExistenteException | Aplicacao.EnfermariaNaoExistenteException | Aplicacao.PacienteNaoExistenteException | NenhumaLinhaSelecionadaException ex) {
            mostrarAviso(ex.getMessage());
        } catch (Exception ex) {
            mostrarAviso("Erro interno");
        }
    }

    private void removerPaciente() {
        ITable tabelaPane = ((ITable) getTabTabela().getComponentAt(tabPacienteIndex));

        try {
            validarSeExisteSelecao(true);
        } catch (Exception e) {
            mostrarAviso(e.getMessage());
        }

        int option = JOptionPane.showConfirmDialog(this, "Tem a certeza que quer eliminar a linha selecionada?");

        if (option == JOptionPane.OK_OPTION) {
            IManager manager = getManager(tabelaPane);
            boolean error = false;
            for (int i = 0; i < getTabelaSelecionada().getSelectedRows().length; i++) {
                try {
                    int index = getTabelaSelecionada().getSelectedRows()[i];

                    String key = (String) getTabelaSelecionada().getModel().getValueAt(index, 0);
                    Paciente paciente = ((Paciente) getEntidadeSelecionada(tabelaPane, key));
                    Integer camaIndex = paciente.getCama();
                    manager.remover(paciente);
                    libertarPaciente(paciente);
                } catch (Aplicacao.HospitalNaoExistenteException | Aplicacao.EnfermariaNaoExistenteException ex) {
                    mostrarAviso(ex.getMessage());
                } catch (Exception ex) {
                    mostrarAviso("Ocorreu um erro ao tentar remover a(s) linha(s) selecionada(s)" + (ex.getMessage()== null ? "" : ": " + ex.getMessage()));
                    error = true;
                    break;
                }
            }

            if (error) {
                return;
            }

            atualizar();
            mostrarAviso("Operação executada com sucesso");
        }
    }
    
    private void darAltaPaciente() {
        ITable tabelaSelecionada = ((TabelaBase) getTabTabela().getSelectedComponent());
        if (tabelaSelecionada instanceof TabelaPaciente) {
            try {
                validarSeExisteSelecao(true);
            } catch (Exception e) {
                mostrarAviso(e.getMessage());
            }
        } else {
            mostrarAviso("Tem de selecionar um paciente!");
        }
            
        try {
            Paciente paciente = (Paciente)app.getPaciente(hospitalSelecionado, enfermariaSelecionada, getCodigoSelecionado(tabelaSelecionada));
            
            if (paciente.getDataSaida() != null){
               mostrarAviso("O paciente ja teve alta"); 
               return;
            }
            
            //inserir data de saida
            Calendar dataSaida = Calendar.getInstance();
            int dia = dataSaida.get(Calendar.DAY_OF_MONTH);
            int mes = dataSaida.get(Calendar.MONTH) + 1;
            int ano = dataSaida.get(Calendar.YEAR);
            String dataSaidaStr = String.valueOf(dia + "/" + mes + "/" + ano);
            
            paciente.setDataSaida(dataSaidaStr);
            ManagerPaciente manager = app.getManagerPaciente(hospitalSelecionado, enfermariaSelecionada);
            manager.editar(paciente);
            libertarPaciente(paciente);

            atualizar();
            mostrarAviso("Operaçao efetuada com sucesso");

        } catch (Aplicacao.HospitalNaoExistenteException | Aplicacao.EnfermariaNaoExistenteException ex) {
            mostrarAviso(ex.getMessage());
        } catch (Exception ex) {
             mostrarAviso("Erro interno!");
        }
    }

    private void adicionarEnfermeiro() {
        try {
            JanelaCriarProfissionalSaude janela = new JanelaCriarProfissionalSaude(this, app, hospitalSelecionado, enfermariaSelecionada, null, false);
            janela.setVisible(true);
        } catch (Aplicacao.EnfermariaNaoExistenteException | Aplicacao.HospitalNaoExistenteException ex) {
            mostrarAviso(ex.getMessage());
        } catch (Exception ex) {
            mostrarAviso("Erro interno");
        }
    }

    private void adicionarMedico() {
        try {
            JanelaCriarProfissionalSaude janela = new JanelaCriarProfissionalSaude(this, app, hospitalSelecionado, enfermariaSelecionada, null, true);
            janela.setVisible(true);
        } catch (Aplicacao.EnfermariaNaoExistenteException | Aplicacao.HospitalNaoExistenteException ex) {
            mostrarAviso(ex.getMessage());
        } catch (Exception ex) {
            mostrarAviso("Erro interno");
        }
    }

    protected void editarProfissionalSaude() {
        try {
            ITable tabelaPane = ((ITable) getTabTabela().getComponentAt(tabProfissionalSaudeIndex));
            validarSeExisteSelecao(tabelaPane.getTabela(), false);
            int rowIndex = tabelaPane.getLinhaSelecionada();
            String codigo = (String) tabelaPane.getTabela().getModel().getValueAt(rowIndex, tabelaPane.getColunaCodigo());

            boolean isMedico = (app.getProfissionalSaude(hospitalSelecionado, enfermariaSelecionada, codigo) instanceof Medico);
            JanelaCriarProfissionalSaude janela = new JanelaCriarProfissionalSaude(this, app, hospitalSelecionado, enfermariaSelecionada, codigo, isMedico);
            janela.setVisible(true);
        } catch (Aplicacao.HospitalNaoExistenteException | Aplicacao.EnfermariaNaoExistenteException | Aplicacao.ProfissionalSaudeNaoExistenteException | NenhumaLinhaSelecionadaException ex) {
            mostrarAviso(ex.getMessage());
        } catch (Exception ex) {
            mostrarAviso("Erro interno");
        }
    }

    private void removerProfissionalSaude() {
        ITable tabelaPane = ((ITable) getTabTabela().getComponentAt(tabProfissionalSaudeIndex));

        remover(tabelaPane);
    }

    private void adicionarEquipamento() {
        try {
            JanelaCriarEquipamento janela = new JanelaCriarEquipamento(this, app, hospitalSelecionado, enfermariaSelecionada, null);
            janela.setVisible(true);
        } catch (Aplicacao.EnfermariaNaoExistenteException | Aplicacao.EquipamentoNaoExistenteException | Aplicacao.HospitalNaoExistenteException ex) {
            mostrarAviso(ex.getMessage());
        } catch (Exception ex) {
            mostrarAviso("Erro interno");
        }
    }

    protected void editarEquipamento() {
        try {
            ITable tabelaPane = ((ITable) getTabTabela().getComponentAt(tabEquipamentoIndex));
            validarSeExisteSelecao(tabelaPane.getTabela(), false);
            int rowIndex = tabelaPane.getLinhaSelecionada();
            String codigo = (String) tabelaPane.getTabela().getModel().getValueAt(rowIndex, tabelaPane.getColunaCodigo());

            JanelaCriarEquipamento janela = new JanelaCriarEquipamento(this, app, hospitalSelecionado, enfermariaSelecionada, codigo);
            janela.setVisible(true);
        } catch (Aplicacao.HospitalNaoExistenteException | Aplicacao.EnfermariaNaoExistenteException | Aplicacao.EquipamentoNaoExistenteException | NenhumaLinhaSelecionadaException ex) {
            mostrarAviso(ex.getMessage());
        } catch (Exception ex) {
            mostrarAviso("Erro interno");
        }
    }

    private void removerEquipamento() {
        ITable tabelaPane = ((ITable) getTabTabela().getComponentAt(tabEquipamentoIndex));

        remover(tabelaPane);
    }

    private String getHospitalSelecionado() throws NenhumaLinhaSelecionadaException {
        if (hospitalSelecionado != null) {
            return hospitalSelecionado;
        }

        return getCodigoSelecionado(((ITable) getTabTabela().getSelectedComponent()));
    }

    protected void remover(ITable tabelaPane) {
        JTable tabela = tabelaPane.getTabela();
        
        if(tabelaPane instanceof TabelaPaciente) {
            removerPaciente();
            return;
        }
        
        try {
            validarSeExisteSelecao(tabela, true);
        } catch (Exception e) {
            mostrarAviso(e.getMessage());
            return;
        }

        int option = JOptionPane.showConfirmDialog(this, "Tem a certeza que quer eliminar a linha selecionada?");

        if (option == JOptionPane.OK_OPTION) {
            IManager manager = getManager(tabelaPane);
            boolean error = false;
            for (int i = 0; i < tabela.getSelectedRows().length; i++) {
                try {
                    int index = tabela.getSelectedRows()[i];

                    String key = (String) tabela.getModel().getValueAt(index, 0);
                    manager.remover(getEntidadeSelecionada(tabelaPane, key));
                } catch (Exception ex) {
                    mostrarAviso("Ocorreu um erro ao tentar remover a(s) linha(s) selecionada(s): " + ex.getMessage());
                    error = true;
                    break;
                }
            }

            if (error) {
                return;
            }

            atualizar();
            mostrarAviso("Operação executada com sucesso");
        }

    }

    /*
     * Métodos auxiliares genéricos
     */
    protected void mostrarAviso(String aviso) {
        if(aviso.trim().isEmpty()){
            aviso = "Ocorreu um erro de sistema";
        }
        
        JOptionPane.showMessageDialog(rootPane, aviso);
    }

    protected void fechar() {
        dispose();
    }

    public void atualizar() {
        // guarda os dados alterados
        guardar();

        // atualizar os dados na label do detalhe
        setTextoDetalhe();

        //Informa o modelo de todas as tabelas que foram efetuadas alteracoes, o modelo informa a tabelaPane e os dados são redesenhados
        for (int i = 0; i < getTabTabela().getComponentCount(); i++) {
            ((AbstractTableModel) ((ITable) getTabTabela().getComponentAt(i)).getTabela().getModel()).fireTableDataChanged();
        }
    }

    protected String getCodigoSelecionado(ITable tabelaPane) throws NenhumaLinhaSelecionadaException {
        validarSeExisteSelecao(false);

        int rowIndex = tabelaPane.getLinhaSelecionada();
        String codigo = (String) getTabelaSelecionada().getModel().getValueAt(rowIndex, tabelaPane.getColunaCodigo());

        return codigo;
    }

    protected void validarSeExisteSelecao(boolean isMultipla) throws NenhumaLinhaSelecionadaException {
        validarSeExisteSelecao(getTabelaSelecionada(), isMultipla);
    }

    protected void validarSeExisteSelecao(JTable tabela, boolean isMultipla) throws NenhumaLinhaSelecionadaException {
        if (tabela.getSelectedRows() == null
                || (isMultipla && tabela.getSelectedRows().length <= 0)
                || (!isMultipla && tabela.getSelectedRows().length != 1)) {
            throw new NenhumaLinhaSelecionadaException();
        }
        return;
    }

    public void guardar() {
        serializacao.guardar(app);
    }

    public JTable getTabelaSelecionada() {
        return ((ITable) getTabTabela().getSelectedComponent()).getTabela();
    }

    protected int getSelectedRow() {
        return getTabelaSelecionada().getSelectedRow();
    }

    protected int[] getSelectedRows() {
        return getTabelaSelecionada().getSelectedRows();
    }

    /**
     * Get manager correspondente à entidade da tabela
     *
     * @param tabelaPane
     * @return
     */
    public IManager getManager(ITable tabelaPane) {

        try {
            if (tabelaPane instanceof TabelaEquipamento) {
                return app.getManagerEquipamento(hospitalSelecionado, enfermariaSelecionada);
            } else if (tabelaPane instanceof TabelaPaciente) {
                return app.getManagerPaciente(hospitalSelecionado, enfermariaSelecionada);
            } else if (tabelaPane instanceof TabelaProfissionalSaude) {
                return app.getManagerProfissionalSaude(hospitalSelecionado, enfermariaSelecionada);
            } else if (tabelaPane instanceof TabelaHospital) {
                return app.getManagerHospital();
            } else if (tabelaPane instanceof TabelaEnfermaria) {
                return app.getManagerEnfermaria(hospitalSelecionado);
            } else {
                return null;
            }
        } catch (Aplicacao.HospitalNaoExistenteException | Aplicacao.EnfermariaNaoExistenteException ex) {
            mostrarAviso(ex.getMessage());
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        return null;
    }

    /*
     * FIM Métodos auxiliares genéricos
     */
    /**
     * Getters botoes
     */
    public JButton getBotaoCriar() {
        return botaoCriar;
    }

    public JButton getBotaoEditar() {
        return botaoEditar;
    }

    public JButton getBotaoRemover() {
        return botaoRemover;
    }

    public JButton getBotaoDetalhe() {
        return botaoDetalhe;
    }

    public JMenu getMenuEquipamento() {
        return menuEquipamento;
    }

    public JMenu getMenuProfissionalSaude() {
        return menuProfissionalSaude;
    }

    public JMenu getMenuPaciente() {
        return menuPaciente;
    }

    public JTabbedPane getTabTabela() {
        return tabTabela;
    }

    public EntidadeBase getEntidadeSelecionada(ITable tabelaSelecionada, String key) throws Exception {

        EntidadeBase entidadeRef;

        if (tabelaSelecionada instanceof TabelaHospital) {
            entidadeRef = app.getHospital(key);
        } else if (tabelaSelecionada instanceof TabelaEnfermaria) {
            entidadeRef = app.getEnfermaria(hospitalSelecionado, key);
        } else if (tabelaSelecionada instanceof TabelaEquipamento) {
            entidadeRef = app.getEquipamento(hospitalSelecionado, enfermariaSelecionada, key);
        } else if (tabelaSelecionada instanceof TabelaProfissionalSaude) {
            entidadeRef = app.getProfissionalSaude(hospitalSelecionado, enfermariaSelecionada, key);
        } else if (tabelaSelecionada instanceof TabelaPaciente) {
            entidadeRef = app.getPaciente(hospitalSelecionado, enfermariaSelecionada, key);
        } else {
            entidadeRef = null;
        }

        return entidadeRef;
    }

    public JLabel getLabelDetalhe() {
        return labelDetalhe;
    }

    private void esconderTabs() {
        getTabTabela().setVisible(false);
    }

    private void esconderBotoes() {
        botaoCriar.setVisible(false);
        botaoEditar.setVisible(false);
        botaoDetalhe.setVisible(false);
    }

    private void esconderMenus() {
        menuEquipamento.setVisible(false);
        menuProfissionalSaude.setVisible(false);
        menuPaciente.setVisible(false);
    }

    protected void redesenharTabela() {
        getTabTabela().revalidate();
        getTabTabela().repaint();
        setEventosTabela();
    }

    protected void setEventos() {
        // criar
        getBotaoCriar().addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                adicionar();
            }
        });

        // Editar
        getBotaoEditar().addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                editar();
            }
        });

        // detalhe
        getBotaoDetalhe().addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                detalhe();
            }
        });
    }

    /**
     * Atribui os eventos às tabelas existentes na janela
     */
    protected void setEventosTabela() {
        for (int i = 0; i < getTabTabela().getComponentCount(); i++) {
            ((ITable) getTabTabela().getComponentAt(i)).getTabela().addMouseListener(new MouseAdapter() {
                public void mouseClicked(MouseEvent evt) {

                    if (evt.getClickCount() == 2) {
                        editar();
                    }
                }
            });
        }
    }

    /**
     * Libertar camas, equipamentos e o paciente da lista do seu médico
     * @param paciente 
     */
    private void libertarPaciente(Paciente paciente) throws Aplicacao.HospitalNaoExistenteException, Aplicacao.EnfermariaNaoExistenteException, Exception {

        //libertar o paciente da cama ocupada
        app.setCamaLivre(hospitalSelecionado, enfermariaSelecionada, paciente.getCama());
        // libertar possiveis equipamentos utilizados pelo paciente
        app.setEquipamentosLivre(hospitalSelecionado, enfermariaSelecionada, paciente);
        // retirar paciente da lista do seu medico
        app.retirarPacienteDoMedico(hospitalSelecionado, enfermariaSelecionada, paciente);
    }

    public static class NenhumaLinhaSelecionadaException extends Exception {

        public NenhumaLinhaSelecionadaException() {
            super("Não existe nenhuma linha selecionada");
        }
    }
}
