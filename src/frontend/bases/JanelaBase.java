package frontend.bases;

import backend.interfaces.ITable;
import backend.interfaces.IJanelaConsulta;
import backend.interfaces.ICallerJanelaCriarInterface;
import backend.Aplicacao;
import backend.Serializacao;
import backend.bases.EntidadeBase;
import backend.interfaces.IManager;
import frontend.tabelas.TabelaEnfermaria;
import frontend.tabelas.TabelaEquipamento;
import frontend.tabelas.TabelaHospital;
import frontend.tabelas.TabelaPaciente;
import frontend.tabelas.TabelaProfissionalSaude;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTabbedPane;
import javax.swing.JTable;
import javax.swing.table.AbstractTableModel;

public abstract class JanelaBase extends javax.swing.JDialog implements ICallerJanelaCriarInterface, IJanelaConsulta {

    protected final Aplicacao app;
    protected final Serializacao serializacao;

    /**
     * Seleçoes
     */
    protected String hospitalSelecionado;
    protected String enfermariaSelecionada;
    protected String medicoSelecionado;

    /**
     * Creates new form JanelaConsultaEnfermaria
     *
     * @param app
     * @param serializacao
     */
    public JanelaBase(Aplicacao app, Serializacao serializacao, String tituloJanela) {
        this.app = app;
        this.serializacao = serializacao;

        initComponents();

        // começar por pôr todos os botoes invisiveis
        esconderBotoes();

        // tabs
        esconderTabs();

        // definir os eventos dos botoes e tabela
        setEventos();

        // titulo da janela
        setTitle(tituloJanela);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        paneDetalhe = new javax.swing.JPanel();
        labelDetalhe = new javax.swing.JLabel();
        contentor = new javax.swing.JPanel();
        botoes = new javax.swing.JPanel();
        botaoCriar = new javax.swing.JButton();
        botaoEditar = new javax.swing.JButton();
        botaoRemover = new javax.swing.JButton();
        botaoCriarMedico = new javax.swing.JButton();
        botaoCriarEnfermeiro = new javax.swing.JButton();
        botaoDetalhe = new javax.swing.JButton();
        botaoGuardar = new javax.swing.JButton();
        tabs = new javax.swing.JPanel();
        tabTabela = new javax.swing.JTabbedPane();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        labelDetalhe.setBackground(new java.awt.Color(255, 255, 255));
        labelDetalhe.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        labelDetalhe.setForeground(new java.awt.Color(153, 153, 153));
        labelDetalhe.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        labelDetalhe.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));

        javax.swing.GroupLayout paneDetalheLayout = new javax.swing.GroupLayout(paneDetalhe);
        paneDetalhe.setLayout(paneDetalheLayout);
        paneDetalheLayout.setHorizontalGroup(
            paneDetalheLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, paneDetalheLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(labelDetalhe, javax.swing.GroupLayout.PREFERRED_SIZE, 750, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(21, 21, 21))
        );
        paneDetalheLayout.setVerticalGroup(
            paneDetalheLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(paneDetalheLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(labelDetalhe, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        botaoCriar.setText("Criar");
        botaoCriar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                botaoCriarMouseClicked(evt);
            }
        });
        botaoCriar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoCriarActionPerformed(evt);
            }
        });

        botaoEditar.setText("Editar");
        botaoEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoEditarActionPerformed(evt);
            }
        });

        botaoRemover.setText("Remover linha");
        botaoRemover.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                botaoRemoverMouseClicked(evt);
            }
        });

        botaoCriarMedico.setText("Criar Médico");
        botaoCriarMedico.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                botaoCriarMedicoMouseClicked(evt);
            }
        });
        botaoCriarMedico.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoCriarMedicoActionPerformed(evt);
            }
        });

        botaoCriarEnfermeiro.setText("Criar Enfermeiro");
        botaoCriarEnfermeiro.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                botaoCriarEnfermeiroMouseClicked(evt);
            }
        });
        botaoCriarEnfermeiro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoCriarEnfermeiroActionPerformed(evt);
            }
        });

        botaoDetalhe.setText("Detalhe");
        botaoDetalhe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoDetalheActionPerformed(evt);
            }
        });

        botaoGuardar.setText("Guardar");
        botaoGuardar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                botaoGuardarMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout botoesLayout = new javax.swing.GroupLayout(botoes);
        botoes.setLayout(botoesLayout);
        botoesLayout.setHorizontalGroup(
            botoesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(botoesLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(botaoCriar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(botaoCriarMedico)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(botaoCriarEnfermeiro)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(botaoEditar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(botaoDetalhe)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(botaoRemover)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(botaoGuardar)
                .addContainerGap())
        );
        botoesLayout.setVerticalGroup(
            botoesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(botoesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(botaoCriar)
                .addComponent(botaoRemover)
                .addComponent(botaoDetalhe)
                .addComponent(botaoCriarMedico)
                .addComponent(botaoCriarEnfermeiro)
                .addComponent(botaoEditar)
                .addComponent(botaoGuardar))
        );

        javax.swing.GroupLayout tabsLayout = new javax.swing.GroupLayout(tabs);
        tabs.setLayout(tabsLayout);
        tabsLayout.setHorizontalGroup(
            tabsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tabTabela, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        tabsLayout.setVerticalGroup(
            tabsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tabTabela, javax.swing.GroupLayout.DEFAULT_SIZE, 276, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout contentorLayout = new javax.swing.GroupLayout(contentor);
        contentor.setLayout(contentorLayout);
        contentorLayout.setHorizontalGroup(
            contentorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(contentorLayout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(tabs, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(contentorLayout.createSequentialGroup()
                .addComponent(botoes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        contentorLayout.setVerticalGroup(
            contentorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(contentorLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(botoes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tabs, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(contentor, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(paneDetalhe, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(paneDetalhe, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(contentor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void botaoCriarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_botaoCriarMouseClicked

    }//GEN-LAST:event_botaoCriarMouseClicked

    private void botaoCriarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoCriarActionPerformed

    }//GEN-LAST:event_botaoCriarActionPerformed

    private void botaoEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoEditarActionPerformed

    }//GEN-LAST:event_botaoEditarActionPerformed

    private void botaoRemoverMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_botaoRemoverMouseClicked
        remover();
    }//GEN-LAST:event_botaoRemoverMouseClicked

    private void botaoCriarMedicoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_botaoCriarMedicoMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_botaoCriarMedicoMouseClicked

    private void botaoCriarMedicoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoCriarMedicoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_botaoCriarMedicoActionPerformed

    private void botaoCriarEnfermeiroMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_botaoCriarEnfermeiroMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_botaoCriarEnfermeiroMouseClicked

    private void botaoCriarEnfermeiroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoCriarEnfermeiroActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_botaoCriarEnfermeiroActionPerformed

    private void botaoDetalheActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoDetalheActionPerformed

    }//GEN-LAST:event_botaoDetalheActionPerformed

    private void botaoGuardarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_botaoGuardarMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_botaoGuardarMouseClicked

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton botaoCriar;
    private javax.swing.JButton botaoCriarEnfermeiro;
    private javax.swing.JButton botaoCriarMedico;
    private javax.swing.JButton botaoDetalhe;
    private javax.swing.JButton botaoEditar;
    private javax.swing.JButton botaoGuardar;
    private javax.swing.JButton botaoRemover;
    private javax.swing.JPanel botoes;
    private javax.swing.JPanel contentor;
    private javax.swing.JLabel labelDetalhe;
    private javax.swing.JPanel paneDetalhe;
    private javax.swing.JTabbedPane tabTabela;
    private javax.swing.JPanel tabs;
    // End of variables declaration//GEN-END:variables

    @Override
    public void setTextoDetalhe() {
        // para as janelas que nao precisam de ter texto no detalhe
    }

    private void remover() {
        try {
            validarSeExisteSelecao(true);
        } catch (Exception e) {
            mostrarAviso(e.getMessage());
        }

        int option = JOptionPane.showConfirmDialog(this, "Tem a certeza que quer eliminar a linha selecionada?");

        if (option == JOptionPane.OK_OPTION) {
            IManager manager = getManager();
            boolean error = false;
            for (int i = 0; i < getTabelaSelecionada().getSelectedRows().length; i++) {
                try {
                    int index = getTabelaSelecionada().getSelectedRows()[i];

                    String key = (String) getTabelaSelecionada().getModel().getValueAt(index, 0);
                    manager.remover(getEntidadeSelecionada(key));
                } catch (Exception ex) {
                    mostrarAviso("Ocorreu um erro ao tentar remover a(s) linha(s) selecionada(s): " + ex.getMessage());
                    error = true;
                    break;
                }
            }

            if (error) {
                return;
            }

            atualizar();
            mostrarAviso("Operação executada com sucesso");
        }

    }

    /*
     * Métodos auxiliares genéricos
     */
    protected void mostrarAviso(String aviso) {
        JOptionPane.showMessageDialog(rootPane, aviso);
    }

    protected void fechar() {
        dispose();
    }

    public void atualizar() {
        // guarda os dados alterados
        guardar();

        // atualizar os dados na label do detalhe
        setTextoDetalhe();

        //Informa o modelo que foram efetuadas alteracoes, o modelo informa a tabela e os dados são redesenhados
        ((AbstractTableModel) getTabelaSelecionada().getModel()).fireTableDataChanged();
    }

    protected String getCodigoSelecionado() throws NenhumaLinhaSelecionadaException {
        validarSeExisteSelecao(false);

        ITable tabela = ((TabelaBase) getTabTabela().getSelectedComponent());
        int rowIndex = getTabelaSelecionada().getSelectedRow();
        String codigo = (String) getTabelaSelecionada().getModel().getValueAt(rowIndex, tabela.getColunaCodigo());

        return codigo;
    }

    protected void validarSeExisteSelecao(boolean isMultipla) throws NenhumaLinhaSelecionadaException {
        if (getTabelaSelecionada().getSelectedRows() == null
                || (isMultipla && getTabelaSelecionada().getSelectedRows().length <= 0)
                || (!isMultipla && getTabelaSelecionada().getSelectedRows().length != 1)) {
            throw new NenhumaLinhaSelecionadaException();
        }
        return;
    }

    public void guardar() {
        serializacao.guardar(app);
    }

    public JTable getTabelaSelecionada() {
        return ((ITable) getTabTabela().getSelectedComponent()).getTabela();
    }

    protected int getSelectedRow() {
        return getTabelaSelecionada().getSelectedRow();
    }

    protected int[] getSelectedRows() {
        return getTabelaSelecionada().getSelectedRows();
    }

    /*
     * FIM Métodos auxiliares genéricos
     */

    /**
     * Getters botoes
     */
    public JButton getBotaoGuardar() {
        return botaoGuardar;
    }

    public JButton getBotaoCriar() {
        return botaoCriar;
    }

    public JButton getBotaoCriarEnfermeiro() {
        return botaoCriarEnfermeiro;
    }

    public JButton getBotaoCriarMedico() {
        return botaoCriarMedico;
    }

    public JButton getBotaoEditar() {
        return botaoEditar;
    }

    public JButton getBotaoRemover() {
        return botaoRemover;
    }

    public JButton getBotaoDetalhe() {
        return botaoDetalhe;
    }

    public JTabbedPane getTabTabela() {
        return tabTabela;
    }

    public EntidadeBase getEntidadeSelecionada(String key) throws Exception {

        EntidadeBase entidadeRef;
        ITable tabelaSelecionada = ((TabelaBase) getTabTabela().getSelectedComponent());

        if (tabelaSelecionada instanceof TabelaHospital) {
            entidadeRef = app.getHospital(key);
        } else if (tabelaSelecionada instanceof TabelaEnfermaria) {
            entidadeRef = app.getEnfermaria(hospitalSelecionado, key);
        } else if (tabelaSelecionada instanceof TabelaEquipamento) {
            entidadeRef = app.getEquipamento(hospitalSelecionado, enfermariaSelecionada, key);
        } else if (tabelaSelecionada instanceof TabelaProfissionalSaude) {
            entidadeRef = app.getProfissionalSaude(hospitalSelecionado, enfermariaSelecionada, key);
        } else if (tabelaSelecionada instanceof TabelaPaciente) {
            entidadeRef = app.getPaciente(hospitalSelecionado, enfermariaSelecionada, key);
        } else {
            entidadeRef = null;
        }

        return entidadeRef;
    }

    public JLabel getLabelDetalhe() {
        return labelDetalhe;
    }

    private void esconderTabs() {
        getTabTabela().setVisible(false);
    }

    private void esconderBotoes() {
        botaoCriar.setVisible(false);
        botaoEditar.setVisible(false);
        botaoCriarMedico.setVisible(false);
        botaoCriarEnfermeiro.setVisible(false);
        botaoDetalhe.setVisible(false);
        botaoGuardar.setVisible(false);
    }

    protected void redesenharTabela() {
        getTabTabela().revalidate();
        getTabTabela().repaint();
        setEventosTabela();
    }

    protected void setEventos() {
        // criar
        getBotaoCriar().addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                adicionar();
            }
        });

        // Editar
        getBotaoEditar().addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                editar();
            }
        });

        // detalhe
        getBotaoDetalhe().addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                detalhe();
            }
        });
    }

    /**
     * Atribui os eventos às tabelas existentes na janela
     */
    protected void setEventosTabela() {
        for (int i = 0; i < getTabTabela().getComponentCount(); i++) {
            ((ITable)getTabTabela().getComponentAt(i)).getTabela().addMouseListener(new MouseAdapter() {
                public void mouseClicked(MouseEvent evt) {
                    
                    if (evt.getClickCount() == 2) {
                        editar();
                    }
                }
            });
        }
    }

    public static class NenhumaLinhaSelecionadaException extends Exception {

        public NenhumaLinhaSelecionadaException() {
            super("Não existe nenhuma linha selecionada");
        }
    }
}
