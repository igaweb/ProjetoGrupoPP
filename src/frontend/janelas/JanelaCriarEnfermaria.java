package frontend.janelas;

import backend.interfaces.ICallerJanelaCriarInterface;
import backend.Aplicacao;
import backend.entidades.Enfermaria;
import backend.managers.ManagerEnfermaria;
import frontend.model.filtros.TipoEnfermariaComboModel;
import javax.swing.JOptionPane;

public class JanelaCriarEnfermaria extends javax.swing.JDialog {

    private ICallerJanelaCriarInterface janela;
    private Aplicacao app;
    private String operacao;
    private ManagerEnfermaria managerEnfermaria;
    private Enfermaria enfermaria;

    /**
     * Janela para adicionar ou editar uma enfermaria
     * @param janela
     * @param app
     * @param codigoHospital
     * @param codigoEnfermaria 
     */
     
    public JanelaCriarEnfermaria(ICallerJanelaCriarInterface janela, Aplicacao app, String codigoHospital, String codigoEnfermaria) {
        this.janela = janela;
        this.app = app;
        
        initComponents();

        //Indica que a janela deve ser modal ou seja,
        //bloqueia a execução do programa até que a janela seja fechada
        this.setModal(true);    
        
        this.setAlwaysOnTop(true);
        
        //Não permite o redimensionamento da janela
        this.setResizable(false);
        
        //Mostra a centralização da janela
        this.setLocationRelativeTo(null);
        
        //O processo de fecho da janela será controlado pelo programa
        this.setDefaultCloseOperation(DISPOSE_ON_CLOSE);                                
        
        managerEnfermaria = app.getManagerEnfermaria(codigoHospital);
        
        if(codigoEnfermaria == null) {
            operacao = ManagerEnfermaria.OPERACAO_ADICIONAR;
            setTitle("Adicionar Enfermaria");
        } else {
            operacao = ManagerEnfermaria.OPERACAO_EDITAR;
            setTitle("Editar Enfermaria");
            try {
                enfermaria = app.getEnfermaria(codigoHospital, codigoEnfermaria);
            } catch (Aplicacao.HospitalNaoExistenteException | Aplicacao.EnfermariaNaoExistenteException ex) {
                mostrarAviso(ex.getMessage());
                return;
            }
            campoEnfermariaTipo.setSelectedIndex(enfermaria.getTipo());
            int nCamas = enfermaria.getCamas().length;
            campoNome.setText(enfermaria.getNome());
            campoNCamas.setText(nCamas + "");
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        labelNome = new javax.swing.JLabel();
        campoNome = new javax.swing.JTextField();
        labelTipo = new javax.swing.JLabel();
        campoEnfermariaTipo = new javax.swing.JComboBox<>();
        labelNcamas = new javax.swing.JLabel();
        campoNCamas = new javax.swing.JTextField();
        botaoGuardar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        java.awt.GridBagLayout layout = new java.awt.GridBagLayout();
        layout.columnWidths = new int[] {0, 10, 0, 10, 0, 10, 0};
        layout.rowHeights = new int[] {0, 10, 0, 10, 0, 10, 0, 10, 0, 10, 0};
        getContentPane().setLayout(layout);

        labelNome.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        labelNome.setText("Nome");
        labelNome.setAlignmentY(0.0F);
        labelNome.setPreferredSize(new java.awt.Dimension(150, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        getContentPane().add(labelNome, gridBagConstraints);

        campoNome.setMinimumSize(new java.awt.Dimension(200, 25));
        campoNome.setPreferredSize(new java.awt.Dimension(200, 25));
        campoNome.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                campoNomeActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        getContentPane().add(campoNome, gridBagConstraints);

        labelTipo.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        labelTipo.setText("Tipo");
        labelTipo.setPreferredSize(new java.awt.Dimension(150, 25));
        labelTipo.setRequestFocusEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        getContentPane().add(labelTipo, gridBagConstraints);

        campoEnfermariaTipo.setModel(new TipoEnfermariaComboModel());
        campoEnfermariaTipo.setMinimumSize(new java.awt.Dimension(200, 25));
        campoEnfermariaTipo.setPreferredSize(new java.awt.Dimension(200, 25));
        campoEnfermariaTipo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                campoEnfermariaTipoActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        getContentPane().add(campoEnfermariaTipo, gridBagConstraints);

        labelNcamas.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        labelNcamas.setText("Número de camas");
        labelNcamas.setPreferredSize(new java.awt.Dimension(150, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        getContentPane().add(labelNcamas, gridBagConstraints);

        campoNCamas.setText("0");
        campoNCamas.setMinimumSize(new java.awt.Dimension(50, 25));
        campoNCamas.setPreferredSize(new java.awt.Dimension(50, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        getContentPane().add(campoNCamas, gridBagConstraints);

        botaoGuardar.setText("Guardar");
        botaoGuardar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                botaoGuardarMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                botaoGuardarMouseEntered(evt);
            }
        });
        botaoGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoGuardarActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        getContentPane().add(botaoGuardar, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void campoEnfermariaTipoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_campoEnfermariaTipoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_campoEnfermariaTipoActionPerformed

    private void campoNomeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_campoNomeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_campoNomeActionPerformed

    private void botaoGuardarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_botaoGuardarMouseClicked
        adicionarOuEditar();
    }//GEN-LAST:event_botaoGuardarMouseClicked

    private void botaoGuardarMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_botaoGuardarMouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_botaoGuardarMouseEntered

    private void botaoGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoGuardarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_botaoGuardarActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton botaoGuardar;
    private javax.swing.JComboBox<String> campoEnfermariaTipo;
    private javax.swing.JTextField campoNCamas;
    private javax.swing.JTextField campoNome;
    private javax.swing.JLabel labelNcamas;
    private javax.swing.JLabel labelNome;
    private javax.swing.JLabel labelTipo;
    // End of variables declaration//GEN-END:variables

    private void adicionarOuEditar() {
        
        String nome = campoNome.getText();
        int tipo = campoEnfermariaTipo.getSelectedIndex();
        Integer nCamas;

        try {
            nCamas = new Integer(campoNCamas.getText());
        } catch (NumberFormatException ex) {
            mostrarAviso("Número de camas inválido");
            return;
        }
        Boolean[] camas = new Boolean[nCamas];
        
        try {
            if(operacao.equals(ManagerEnfermaria.OPERACAO_ADICIONAR)){
                managerEnfermaria.adicionar(nome, tipo, camas);
            } else if(operacao.equals(ManagerEnfermaria.OPERACAO_EDITAR)){
                enfermaria.setNome(nome);
                enfermaria.setTipo(tipo);
                enfermaria.setCamas(camas);
                managerEnfermaria.editar(enfermaria);
            }
            
            fechar();
        } catch (Exception ex) {
            mostrarAviso(ex.getMessage());
        }
        
    }
    
    /*
     * Métodos auxiliares genéricos
    */
    private void mostrarAviso(String aviso) {
        JOptionPane.showMessageDialog(rootPane, aviso);
    }
    
    private void fechar() {
        // fecha a janela atual
        dispose();
        
        // atualiza os dados alterados na listagem
        janela.atualizar();
    }
    /*
     * FIM Métodos auxiliares genéricos
    */
}
