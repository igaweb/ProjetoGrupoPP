package frontend.janelas;

import backend.Aplicacao;
import backend.entidades.Medico;
import backend.entidades.Paciente;
import backend.interfaces.ICallerJanelaCriarInterface;
import backend.managers.ManagerPaciente;
import frontend.model.filtros.MedicoComboModel;
import frontend.model.filtros.EstadoPacienteComboModel;
import java.util.Calendar;
import javax.swing.JOptionPane;

public class JanelaCriarPaciente extends javax.swing.JDialog {
    private ICallerJanelaCriarInterface janela;
    private Aplicacao app;
    private String operacao;
    private ManagerPaciente managerPaciente;
    private Paciente paciente;
    private String codigoHospital, codigoEnfermaria;
    /**
     * Creates new form NewJDialog
     */
    public JanelaCriarPaciente(ICallerJanelaCriarInterface janela, Aplicacao app, String codigoHospital, String codigoEnfermaria, String codigoPaciente) throws Exception {
        this.janela = janela;
        this.app = app;
        this.codigoHospital = codigoHospital;
        this.codigoEnfermaria = codigoEnfermaria;
        
        initComponents();

        //Indica que a janela deve ser modal ou seja,
        //bloqueia a execução do programa até que a janela seja fechada
        this.setModal(true);     
        
        this.setAlwaysOnTop(true);
        
        //Não permite o redimensionamento da janela
        this.setResizable(false);
        
        //Mostra a centralização da janela
        this.setLocationRelativeTo(null);
        
        //O processo de fecho da janela será controlado pelo programa
        this.setDefaultCloseOperation(DISPOSE_ON_CLOSE);                                
        
        campoMedicoAtribuido.setModel(new MedicoComboModel(app,codigoHospital, codigoEnfermaria));
        
        managerPaciente = app.getManagerPaciente(codigoHospital, codigoEnfermaria);
        
        if(codigoPaciente == null) {
            operacao = ManagerPaciente.OPERACAO_ADICIONAR;
            setTitle("Adicionar Paciente");
            
            // se estamos a adicionar, nao pedimos a data de saída          
        } else {
            operacao = ManagerPaciente.OPERACAO_EDITAR;
            setTitle("Editar Paciente");
            paciente = (Paciente)app.getPaciente(codigoHospital, codigoEnfermaria, codigoPaciente);
            campoPacienteNome.setText(paciente.getNome());
            campoPacienteLocalidade.setText(paciente.getLocalidade());
            campoPacienteEstado.setSelectedIndex(paciente.getEstado());  
            MedicoComboModel medicoComboModel = (MedicoComboModel) campoMedicoAtribuido.getModel();
            medicoComboModel.setMedicoSelecionado(paciente);
            
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        labelNome = new javax.swing.JLabel();
        labelLocalidade = new javax.swing.JLabel();
        campoPacienteLocalidade = new javax.swing.JTextField();
        campoPacienteNome = new javax.swing.JTextField();
        campoPacienteEstado = new javax.swing.JComboBox<>();
        labelMedico = new javax.swing.JLabel();
        labelEstado = new javax.swing.JLabel();
        campoMedicoAtribuido = new javax.swing.JComboBox<>();
        botaoGuardar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(350, 0));
        java.awt.GridBagLayout layout = new java.awt.GridBagLayout();
        layout.columnWidths = new int[] {0, 10, 0, 10, 0, 10, 0};
        layout.rowHeights = new int[] {0, 10, 0, 10, 0, 10, 0, 10, 0, 10, 0, 10, 0};
        getContentPane().setLayout(layout);

        labelNome.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        labelNome.setText("Nome");
        labelNome.setMaximumSize(new java.awt.Dimension(150, 25));
        labelNome.setMinimumSize(new java.awt.Dimension(150, 25));
        labelNome.setPreferredSize(new java.awt.Dimension(150, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        getContentPane().add(labelNome, gridBagConstraints);

        labelLocalidade.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        labelLocalidade.setText("Localidade");
        labelLocalidade.setMaximumSize(new java.awt.Dimension(150, 25));
        labelLocalidade.setMinimumSize(new java.awt.Dimension(150, 25));
        labelLocalidade.setPreferredSize(new java.awt.Dimension(150, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        getContentPane().add(labelLocalidade, gridBagConstraints);

        campoPacienteLocalidade.setMaximumSize(new java.awt.Dimension(200, 25));
        campoPacienteLocalidade.setMinimumSize(new java.awt.Dimension(200, 25));
        campoPacienteLocalidade.setPreferredSize(new java.awt.Dimension(200, 25));
        campoPacienteLocalidade.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                campoPacienteLocalidadeActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        getContentPane().add(campoPacienteLocalidade, gridBagConstraints);

        campoPacienteNome.setMaximumSize(new java.awt.Dimension(200, 25));
        campoPacienteNome.setMinimumSize(new java.awt.Dimension(200, 25));
        campoPacienteNome.setPreferredSize(new java.awt.Dimension(200, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        getContentPane().add(campoPacienteNome, gridBagConstraints);

        campoPacienteEstado.setModel(new EstadoPacienteComboModel());
        campoPacienteEstado.setMaximumSize(new java.awt.Dimension(200, 25));
        campoPacienteEstado.setMinimumSize(new java.awt.Dimension(200, 25));
        campoPacienteEstado.setPreferredSize(new java.awt.Dimension(200, 25));
        campoPacienteEstado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                campoPacienteEstadoActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        getContentPane().add(campoPacienteEstado, gridBagConstraints);

        labelMedico.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        labelMedico.setText("Medico");
        labelMedico.setMaximumSize(new java.awt.Dimension(150, 25));
        labelMedico.setMinimumSize(new java.awt.Dimension(150, 25));
        labelMedico.setPreferredSize(new java.awt.Dimension(150, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        getContentPane().add(labelMedico, gridBagConstraints);

        labelEstado.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        labelEstado.setText("Estado");
        labelEstado.setMaximumSize(new java.awt.Dimension(150, 25));
        labelEstado.setMinimumSize(new java.awt.Dimension(150, 25));
        labelEstado.setPreferredSize(new java.awt.Dimension(150, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        getContentPane().add(labelEstado, gridBagConstraints);

        campoMedicoAtribuido.setMaximumSize(new java.awt.Dimension(200, 25));
        campoMedicoAtribuido.setMinimumSize(new java.awt.Dimension(200, 25));
        campoMedicoAtribuido.setPreferredSize(new java.awt.Dimension(200, 25));
        campoMedicoAtribuido.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                campoMedicoAtribuidoActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        getContentPane().add(campoMedicoAtribuido, gridBagConstraints);

        botaoGuardar.setText("Guardar");
        botaoGuardar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                botaoGuardarMouseClicked(evt);
            }
        });
        botaoGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoGuardarActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        getContentPane().add(botaoGuardar, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void botaoGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoGuardarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_botaoGuardarActionPerformed

    private void botaoGuardarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_botaoGuardarMouseClicked
        adicionarOuEditar();
    }//GEN-LAST:event_botaoGuardarMouseClicked

    private void campoPacienteEstadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_campoPacienteEstadoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_campoPacienteEstadoActionPerformed

    private void campoPacienteLocalidadeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_campoPacienteLocalidadeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_campoPacienteLocalidadeActionPerformed

    private void campoMedicoAtribuidoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_campoMedicoAtribuidoActionPerformed

    }//GEN-LAST:event_campoMedicoAtribuidoActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton botaoGuardar;
    private javax.swing.JComboBox<String> campoMedicoAtribuido;
    private javax.swing.JComboBox<String> campoPacienteEstado;
    private javax.swing.JTextField campoPacienteLocalidade;
    private javax.swing.JTextField campoPacienteNome;
    private javax.swing.JLabel labelEstado;
    private javax.swing.JLabel labelLocalidade;
    private javax.swing.JLabel labelMedico;
    private javax.swing.JLabel labelNome;
    // End of variables declaration//GEN-END:variables

    private void adicionarOuEditar() {
        try {
            String nome = campoPacienteNome.getText();
            String localidade = campoPacienteLocalidade.getText();                             
            int estado = campoPacienteEstado.getSelectedIndex();
            
            // buscar o valor inserido na data de entrada
            Calendar dataEntrada = Calendar.getInstance();
            int dia = dataEntrada.get(Calendar.DAY_OF_MONTH);
            int mes = dataEntrada.get(Calendar.MONTH) + 1;
            int ano = dataEntrada.get(Calendar.YEAR);
            
            
            if(operacao.equals(ManagerPaciente.OPERACAO_ADICIONAR)){
                Integer cama = app.getCamaDisponivel(codigoHospital, codigoEnfermaria);
                String dataEntradaStr = String.valueOf(dia + "/" + mes + "/" + ano);     
                paciente = managerPaciente.adicionar(nome, localidade, cama, estado, dataEntradaStr);
                app.setCamaOcupada(codigoHospital, codigoEnfermaria, cama);
            } else if(operacao.equals(ManagerPaciente.OPERACAO_EDITAR)){
                // buscar o valor inserido na data de saída              
                
                paciente.setNome(nome);
                paciente.setLocalidade(localidade);
                paciente.setEstado(estado);               
                         
                managerPaciente.editar(paciente);
                
                // retirar paciente da lista do seu medico
                app.retirarPacienteDoMedico(codigoHospital, codigoEnfermaria, paciente);
            }
            
            // buscar o medico selecionado
            Medico medico = ((MedicoComboModel) campoMedicoAtribuido.getModel()).getMedicoSelecionado(campoMedicoAtribuido.getSelectedIndex());
            
            if(medico ==null) {
                mostrarAviso("Não existem médicos");
                return;
            }
            
            // adiciona o paciente, se ainda nao estiver na lista
            medico.getPacientes().put(paciente.getCodigo(), paciente);

            fechar();
            
        } catch (Exception ex) {
            mostrarAviso(ex.getMessage());
        }
        
    }
    
    /*
     * Métodos auxiliares genéricos
    */
    private void mostrarAviso(String aviso) {
        JOptionPane.showMessageDialog(rootPane, aviso);
    }
    
    private void fechar() {
        dispose();
        janela.atualizar();
    }
    /*
     * FIM Métodos auxiliares genéricos
    */
}

