/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package frontend.janelas;

import backend.interfaces.ICallerJanelaCriarInterface;
import backend.Aplicacao;
import backend.entidades.Enfermaria;
import backend.entidades.Equipamento;
import backend.entidades.Paciente;
import backend.managers.ManagerEquipamento;
import frontend.model.filtros.PacienteComboModel;
import frontend.model.filtros.TipoEquipamentoComboModel;
import javax.swing.JOptionPane;

public class JanelaCriarEquipamento extends javax.swing.JDialog {

    private ICallerJanelaCriarInterface janela;
    private Aplicacao app;
    private String operacao;
    private ManagerEquipamento managerEquipamento;
    private Equipamento equipamento;
    private Enfermaria enfermaria;
    private String codigoHospital;
    private String codigoEnfermaria;
    
    
    /**
     * 
     * @param janela
     * @param app
     * @param codigoHospital
     * @param codigoEnfermaria
     * @param codigoEquipamento
     * @throws backend.Aplicacao.HospitalNaoExistenteException
     * @throws backend.Aplicacao.EnfermariaNaoExistenteException
     * @throws backend.Aplicacao.EquipamentoNaoExistenteException 
     */
   
    public JanelaCriarEquipamento(ICallerJanelaCriarInterface janela, Aplicacao app, String codigoHospital, String codigoEnfermaria, String codigoEquipamento) throws Aplicacao.HospitalNaoExistenteException, Aplicacao.EnfermariaNaoExistenteException, Aplicacao.EquipamentoNaoExistenteException {
        this.janela = janela;
        this.app = app;
        this.codigoHospital = codigoHospital;
        this.codigoEnfermaria = codigoEnfermaria;

        initComponents();
        
        comboNomePaciente.setModel(new PacienteComboModel(app, codigoHospital, codigoEnfermaria, true));

        //Indica que a janela deve ser modal ou seja,
        //bloqueia a execução do programa até que a janela seja fechada
        this.setModal(true);

        this.setAlwaysOnTop(true);

        //Não permite o redimensionamento da janela
        this.setResizable(false);

        //Mostra a centralização da janela
        this.setLocationRelativeTo(null);

        //O processo de fecho da janela será controlado pelo programa
        this.setDefaultCloseOperation(DISPOSE_ON_CLOSE);

        try {
            enfermaria = (Enfermaria) app.getManagerEnfermaria(codigoHospital).getLista().get(codigoEnfermaria);
        } catch (Exception e) {
            throw new NullPointerException("Falta codigo da Enfermaria.");
        }
        
        managerEquipamento = app.getManagerEquipamento(codigoHospital, codigoEnfermaria);
        
        if (codigoEquipamento == null) {
            operacao = ManagerEquipamento.OPERACAO_ADICIONAR;
            setTitle("Adicionar Equipamento");
            comboNomePaciente.setVisible(false);
            labelNomePaciente.setVisible(false);
        } else {
            operacao = ManagerEquipamento.OPERACAO_EDITAR;
            setTitle("Editar Equipamento");
            equipamento = (Equipamento) app.getEquipamento(codigoHospital, codigoEnfermaria, codigoEquipamento);
            campoNomeEquipamento.setText(equipamento.getNome());
            comboTipoEquipamento.setSelectedIndex(equipamento.getTipo());
            PacienteComboModel pacienteComboModel = (PacienteComboModel) comboNomePaciente.getModel();
            pacienteComboModel.setPacienteSelecionado(equipamento.getPaciente());
            
        }
    }
    
/**
 * This method is called from within the constructor to initialize the form.
 * WARNING: Do NOT modify this code. The content of this method is always
 * regenerated by the Form Editor.
 */
@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        botaoGuardar = new javax.swing.JButton();
        labelNomePaciente = new javax.swing.JLabel();
        comboNomePaciente = new javax.swing.JComboBox<>();
        labelNomeEquipamento = new javax.swing.JLabel();
        campoNomeEquipamento = new javax.swing.JTextField();
        labelTipoEquipamento = new javax.swing.JLabel();
        comboTipoEquipamento = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        java.awt.GridBagLayout layout = new java.awt.GridBagLayout();
        layout.columnWidths = new int[] {0, 10, 0, 10, 0, 10, 0};
        layout.rowHeights = new int[] {0, 10, 0, 10, 0, 10, 0, 10, 0, 10, 0, 10, 0, 10, 0};
        getContentPane().setLayout(layout);

        botaoGuardar.setText("Guardar");
        botaoGuardar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                botaoGuardarMouseClicked(evt);
            }
        });
        botaoGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoGuardarActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 13;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        getContentPane().add(botaoGuardar, gridBagConstraints);

        labelNomePaciente.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        labelNomePaciente.setText("Paciente Associado");
        labelNomePaciente.setMaximumSize(new java.awt.Dimension(0, 0));
        labelNomePaciente.setMinimumSize(new java.awt.Dimension(150, 25));
        labelNomePaciente.setPreferredSize(new java.awt.Dimension(150, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.ipadx = 34;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        getContentPane().add(labelNomePaciente, gridBagConstraints);

        try {
            comboNomePaciente.setMaximumSize(new java.awt.Dimension(200, 25));
            comboNomePaciente.setMinimumSize(new java.awt.Dimension(200, 25));
            comboNomePaciente.setPreferredSize(new java.awt.Dimension(200, 25));
        } catch (Exception e) {
            System.out.println(e);
        }
        comboNomePaciente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboNomePacienteActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        getContentPane().add(comboNomePaciente, gridBagConstraints);

        labelNomeEquipamento.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        labelNomeEquipamento.setText("Nome");
        labelNomeEquipamento.setMaximumSize(new java.awt.Dimension(0, 0));
        labelNomeEquipamento.setMinimumSize(new java.awt.Dimension(150, 25));
        labelNomeEquipamento.setPreferredSize(new java.awt.Dimension(150, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.ipady = 19;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        getContentPane().add(labelNomeEquipamento, gridBagConstraints);

        campoNomeEquipamento.setMaximumSize(new java.awt.Dimension(200, 25));
        campoNomeEquipamento.setMinimumSize(new java.awt.Dimension(200, 25));
        campoNomeEquipamento.setPreferredSize(new java.awt.Dimension(200, 25));
        campoNomeEquipamento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                campoNomeEquipamentoActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        getContentPane().add(campoNomeEquipamento, gridBagConstraints);
        campoNomeEquipamento.getAccessibleContext().setAccessibleName("");
        campoNomeEquipamento.getAccessibleContext().setAccessibleDescription("");

        labelTipoEquipamento.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        labelTipoEquipamento.setText("Tipo de equipamento");
        labelTipoEquipamento.setMaximumSize(new java.awt.Dimension(0, 0));
        labelTipoEquipamento.setMinimumSize(new java.awt.Dimension(150, 25));
        labelTipoEquipamento.setPreferredSize(new java.awt.Dimension(150, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.ipadx = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        getContentPane().add(labelTipoEquipamento, gridBagConstraints);

        comboTipoEquipamento.setModel(new TipoEquipamentoComboModel());
        comboTipoEquipamento.setMaximumSize(new java.awt.Dimension(200, 25));
        comboTipoEquipamento.setMinimumSize(new java.awt.Dimension(200, 25));
        comboTipoEquipamento.setPreferredSize(new java.awt.Dimension(200, 25));
        comboTipoEquipamento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboTipoEquipamentoActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        getContentPane().add(comboTipoEquipamento, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void botaoGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoGuardarActionPerformed
        adicionarOuEditar();
    }//GEN-LAST:event_botaoGuardarActionPerformed

    private void botaoGuardarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_botaoGuardarMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_botaoGuardarMouseClicked

    private void comboNomePacienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboNomePacienteActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_comboNomePacienteActionPerformed

    private void campoNomeEquipamentoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_campoNomeEquipamentoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_campoNomeEquipamentoActionPerformed

    private void comboTipoEquipamentoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboTipoEquipamentoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_comboTipoEquipamentoActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton botaoGuardar;
    private javax.swing.JTextField campoNomeEquipamento;
    private javax.swing.JComboBox<String> comboNomePaciente;
    private javax.swing.JComboBox<String> comboTipoEquipamento;
    private javax.swing.JLabel labelNomeEquipamento;
    private javax.swing.JLabel labelNomePaciente;
    private javax.swing.JLabel labelTipoEquipamento;
    // End of variables declaration//GEN-END:variables

   
    
    private void adicionarOuEditar() {
        String nome = campoNomeEquipamento.getText();
        int tipo = comboTipoEquipamento.getSelectedIndex();        
        
        try {
            if (operacao.equals(ManagerEquipamento.OPERACAO_ADICIONAR)) {
              managerEquipamento.adicionar(nome,tipo);

            } else if (operacao.equals(ManagerEquipamento.OPERACAO_EDITAR)) {
                equipamento.setNome(nome);
                equipamento.setTipo(tipo);
                if(comboNomePaciente.getSelectedIndex() == 0) {
                    equipamento.setPaciente(null);
                } else {
                    Paciente paciente = ((PacienteComboModel)comboNomePaciente.getModel()).getPacienteSelecionado(comboNomePaciente.getSelectedIndex());
                    equipamento.setPaciente(paciente);
                }
                
                managerEquipamento.editar(equipamento);
            }
            
            fechar();
 
        } catch (Exception ex) {
            mostrarAviso(ex.getMessage());
        }

    }

    /*
     * Métodos auxiliares genéricos
     */
    private void mostrarAviso(String aviso) {
        JOptionPane.showMessageDialog(rootPane, aviso);
    }

    private void fechar() {
        dispose();
        
        janela.atualizar();
    }
    /*
     * FIM Métodos auxiliares genéricos
     */
}