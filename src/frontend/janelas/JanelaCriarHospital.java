package frontend.janelas;

import backend.Aplicacao;
import backend.entidades.Hospital;
import backend.interfaces.ICallerJanelaCriarInterface;
import backend.managers.ManagerHospital;
import javax.swing.JOptionPane;

public class JanelaCriarHospital extends javax.swing.JDialog {

    private ICallerJanelaCriarInterface janela;
    private Aplicacao app;
    private String operacao;
    private ManagerHospital managerHospital;
    private Hospital hospital;

    /**
     * Janela para adicionar ou editar um hospital
     * @param janela
     * @param app
     * @param codigoHospital 
     */
    public JanelaCriarHospital(ICallerJanelaCriarInterface janela, Aplicacao app, String codigoHospital) {
        this.janela = janela;
        this.app = app;

        initComponents();

        //Indica que a janela deve ser modal ou seja,
        //bloqueia a execução do programa até que a janela seja fechada
        this.setModal(true);

        this.setAlwaysOnTop(true);

        //Não permite o redimensionamento da janela
        this.setResizable(false);

        //Mostra a centralização da janela
        this.setLocationRelativeTo(null);

        //O processo de fecho da janela será controlado pelo programa
        this.setDefaultCloseOperation(DISPOSE_ON_CLOSE);

        managerHospital = app.getManagerHospital();

        if (codigoHospital == null) {
            operacao = ManagerHospital.OPERACAO_ADICIONAR;
            setTitle("Adicionar Hospital");
        } else {
            operacao = ManagerHospital.OPERACAO_EDITAR;
            setTitle("Editar Hospital");
            hospital = (Hospital) app.getManagerHospital().getLista().get(codigoHospital);
            campoHospitalNome.setText(hospital.getNome());
            campoHospitaLocalidade.setText(hospital.getLocalidade());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        Localidade = new javax.swing.JLabel();
        campoHospitaLocalidade = new javax.swing.JTextField();
        Nome = new javax.swing.JLabel();
        campoHospitalNome = new javax.swing.JTextField();
        botaoGuardar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        java.awt.GridBagLayout layout = new java.awt.GridBagLayout();
        layout.columnWidths = new int[] {0, 10, 0, 10, 0};
        layout.rowHeights = new int[] {0, 10, 0, 10, 0, 10, 0, 10, 0};
        getContentPane().setLayout(layout);

        Localidade.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        Localidade.setText("Localidade");
        Localidade.setMaximumSize(new java.awt.Dimension(150, 25));
        Localidade.setMinimumSize(new java.awt.Dimension(150, 25));
        Localidade.setPreferredSize(new java.awt.Dimension(150, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        getContentPane().add(Localidade, gridBagConstraints);

        campoHospitaLocalidade.setMaximumSize(new java.awt.Dimension(200, 25));
        campoHospitaLocalidade.setMinimumSize(new java.awt.Dimension(200, 25));
        campoHospitaLocalidade.setPreferredSize(new java.awt.Dimension(200, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        getContentPane().add(campoHospitaLocalidade, gridBagConstraints);

        Nome.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        Nome.setText("Nome");
        Nome.setMaximumSize(new java.awt.Dimension(150, 25));
        Nome.setMinimumSize(new java.awt.Dimension(150, 25));
        Nome.setPreferredSize(new java.awt.Dimension(150, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        getContentPane().add(Nome, gridBagConstraints);

        campoHospitalNome.setMaximumSize(new java.awt.Dimension(200, 25));
        campoHospitalNome.setMinimumSize(new java.awt.Dimension(200, 25));
        campoHospitalNome.setPreferredSize(new java.awt.Dimension(200, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        getContentPane().add(campoHospitalNome, gridBagConstraints);

        botaoGuardar.setText("Guardar");
        botaoGuardar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                botaoGuardarMouseClicked(evt);
            }
        });
        botaoGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoGuardarActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        getContentPane().add(botaoGuardar, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void botaoGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoGuardarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_botaoGuardarActionPerformed

    private void botaoGuardarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_botaoGuardarMouseClicked
        adicionarOuEditar();
    }//GEN-LAST:event_botaoGuardarMouseClicked

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Localidade;
    private javax.swing.JLabel Nome;
    private javax.swing.JButton botaoGuardar;
    private javax.swing.JTextField campoHospitaLocalidade;
    private javax.swing.JTextField campoHospitalNome;
    // End of variables declaration//GEN-END:variables

    private void adicionarOuEditar() {
        try {
            String nome = campoHospitalNome.getText();
            String localidade = campoHospitaLocalidade.getText();

            if (operacao.equals(ManagerHospital.OPERACAO_ADICIONAR)) {
                managerHospital.adicionar(nome, localidade);
            } else if (operacao.equals(ManagerHospital.OPERACAO_EDITAR)) {
                hospital.setNome(nome);
                hospital.setLocalidade(localidade);
                managerHospital.editar(hospital);
            }

            fechar();
        } catch (Exception ex) {
            mostrarAviso(ex.getMessage());
        }

    }

    /*
     * Métodos auxiliares genéricos
     */
    private void mostrarAviso(String aviso) {
        JOptionPane.showMessageDialog(rootPane, aviso);
    }

    private void fechar() {
        // fecha a janela atual
        dispose();
        
        // atualiza os dados alterados na listagem
        janela.atualizar();
    }
    /*
     * FIM Métodos auxiliares genéricos
     */
}
