package frontend.janelas;

import backend.Aplicacao;
import backend.entidades.Enfermeiro;
import backend.entidades.Medico;
import backend.entidades.ProfissionalSaude;
import backend.interfaces.ICallerJanelaCriarInterface;
import backend.managers.ManagerProfissionalSaude;
import javax.swing.JOptionPane;

public class JanelaCriarProfissionalSaude extends javax.swing.JDialog {
    private ICallerJanelaCriarInterface janela;
    private Aplicacao app;

    private String operacao;
    private String nomeProfissionalSaude;
    private ManagerProfissionalSaude managerProfissionalSaude;
    private ProfissionalSaude profissionalSaude;
    private boolean isMedico;
    
    /**
     * janela que cria ou edita profissionais de saude
     * @param janela
     * @param app
     * @param codigoHospital
     * @param codigoEnfermaria
     * @param codigoProfissionalSaude
     * @param isMedico
     * @throws backend.Aplicacao.HospitalNaoExistenteException
     * @throws backend.Aplicacao.EnfermariaNaoExistenteException 
     */
    
    public JanelaCriarProfissionalSaude(ICallerJanelaCriarInterface janela, Aplicacao app,String codigoHospital, String codigoEnfermaria, String codigoProfissionalSaude, boolean isMedico) throws Aplicacao.HospitalNaoExistenteException, Aplicacao.EnfermariaNaoExistenteException {
        this.janela = janela;
        this.app = app;
        this.isMedico = isMedico;
        
        initComponents();

        //Indica que a janela deve ser modal ou seja,
        //bloqueia a execução do programa até que a janela seja fechada
        this.setModal(true);     
        
        this.setAlwaysOnTop(true);
        
        //Não permite o redimensionamento da janela
        this.setResizable(false);
        
        //Mostra a centralização da janela
        this.setLocationRelativeTo(null);
        
        //O processo de fecho da janela será controlado pelo programa
        this.setDefaultCloseOperation(DISPOSE_ON_CLOSE);   
        
        managerProfissionalSaude = app.getManagerProfissionalSaude(codigoHospital, codigoEnfermaria);
        
        if(codigoProfissionalSaude == null) {
            operacao = ManagerProfissionalSaude.OPERACAO_ADICIONAR;
            
            if(isMedico) {
                setTitle("Adicionar Médico");
                profissionalSaude= new Medico();
            } else {
                profissionalSaude= new Enfermeiro();
                setTitle("Adicionar Enfermeiro");
            }
            labelEspecialidade.setVisible(isMedico);
            campoEspecialidadeProfissionalSaude.setVisible(isMedico);
        } else {
            operacao = ManagerProfissionalSaude.OPERACAO_EDITAR;
            setTitle("Editar Profissional de Saúde");
            
            try {
                profissionalSaude = app.getProfissionalSaude(codigoHospital, codigoEnfermaria, codigoProfissionalSaude);                
            } catch (Aplicacao.EnfermariaNaoExistenteException | Aplicacao.HospitalNaoExistenteException | Aplicacao.ProfissionalSaudeNaoExistenteException e) {
                mostrarAviso(e.getMessage());
                return;
            } 
            
            campoNomeProfissionalSaude.setText(profissionalSaude.getNome());
            campoEspecialidadeProfissionalSaude.setVisible(isMedico);
            labelEspecialidade.setVisible(isMedico);
            if(isMedico) {
                campoEspecialidadeProfissionalSaude.setText(((Medico)profissionalSaude).getEspecialidade());
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        labelNome = new javax.swing.JLabel();
        campoNomeProfissionalSaude = new javax.swing.JTextField();
        labelEspecialidade = new javax.swing.JLabel();
        campoEspecialidadeProfissionalSaude = new javax.swing.JTextField();
        botaoGuardar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        java.awt.GridBagLayout layout = new java.awt.GridBagLayout();
        layout.columnWidths = new int[] {0, 10, 0, 10, 0, 10, 0, 10, 0};
        layout.rowHeights = new int[] {0, 10, 0, 10, 0, 10, 0, 10, 0};
        getContentPane().setLayout(layout);

        labelNome.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        labelNome.setText("Nome");
        labelNome.setMaximumSize(new java.awt.Dimension(150, 25));
        labelNome.setMinimumSize(new java.awt.Dimension(150, 25));
        labelNome.setPreferredSize(new java.awt.Dimension(150, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        getContentPane().add(labelNome, gridBagConstraints);

        campoNomeProfissionalSaude.setMaximumSize(new java.awt.Dimension(150, 25));
        campoNomeProfissionalSaude.setMinimumSize(new java.awt.Dimension(150, 25));
        campoNomeProfissionalSaude.setPreferredSize(new java.awt.Dimension(150, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        getContentPane().add(campoNomeProfissionalSaude, gridBagConstraints);

        labelEspecialidade.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        labelEspecialidade.setText("Especialidade");
        labelEspecialidade.setMaximumSize(new java.awt.Dimension(150, 25));
        labelEspecialidade.setMinimumSize(new java.awt.Dimension(150, 25));
        labelEspecialidade.setPreferredSize(new java.awt.Dimension(150, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        getContentPane().add(labelEspecialidade, gridBagConstraints);

        campoEspecialidadeProfissionalSaude.setMaximumSize(new java.awt.Dimension(150, 25));
        campoEspecialidadeProfissionalSaude.setMinimumSize(new java.awt.Dimension(150, 25));
        campoEspecialidadeProfissionalSaude.setPreferredSize(new java.awt.Dimension(150, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        getContentPane().add(campoEspecialidadeProfissionalSaude, gridBagConstraints);

        botaoGuardar.setText("Guardar");
        botaoGuardar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                botaoGuardarMouseClicked(evt);
            }
        });
        botaoGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoGuardarActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        getContentPane().add(botaoGuardar, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void botaoGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoGuardarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_botaoGuardarActionPerformed

    private void botaoGuardarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_botaoGuardarMouseClicked
        adicionarOuEditar();
    }//GEN-LAST:event_botaoGuardarMouseClicked

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton botaoGuardar;
    private javax.swing.JTextField campoEspecialidadeProfissionalSaude;
    private javax.swing.JTextField campoNomeProfissionalSaude;
    private javax.swing.JLabel labelEspecialidade;
    private javax.swing.JLabel labelNome;
    // End of variables declaration//GEN-END:variables

    private void adicionarOuEditar() {
        try {          
            
            String nome = campoNomeProfissionalSaude.getText();         
            profissionalSaude.setNome(nome);
            
            if(isMedico) {
                ((Medico)profissionalSaude).setEspecialidade(campoEspecialidadeProfissionalSaude.getText());
            }
            
            if(operacao.equals(ManagerProfissionalSaude.OPERACAO_ADICIONAR)){
                managerProfissionalSaude.adicionar(profissionalSaude);
            } else if(operacao.equals(ManagerProfissionalSaude.OPERACAO_EDITAR)){              
                managerProfissionalSaude.editar(profissionalSaude);
            }
            
            fechar();
        } catch (Exception ex) {
            mostrarAviso(ex.getMessage());
        }
        
    }
    
    /*
     * Métodos auxiliares genéricos
    */
    private void mostrarAviso(String aviso) {
        JOptionPane.showMessageDialog(rootPane, aviso);
    }
    
    private void fechar() {
        dispose();
        janela.atualizar();
    }
    /*
     * FIM Métodos auxiliares genéricos
    */
}

