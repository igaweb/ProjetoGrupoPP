/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package frontend.janelas;

import backend.interfaces.ICallerJanelaCriarInterface;
import backend.Aplicacao;
import backend.Serializacao;
import backend.entidades.Utilizador;
import backend.managers.ManagerUtilizador;
import javax.swing.JOptionPane;

/**
 *
 * @author iga
 */
public class JanelaCriarUtilizador extends javax.swing.JDialog {

    private ICallerJanelaCriarInterface janela;
    private Aplicacao app;
    private Serializacao serializacao;
    private String operacao;
    private ManagerUtilizador managerUtilizador;
    private Utilizador utilizador;

    /**
     * 
     * @param janela
     * @param app
     * @param serializacao
     * @param nomeUtilizador 
     */
    
    public JanelaCriarUtilizador(ICallerJanelaCriarInterface janela, Aplicacao app, Serializacao serializacao, String nomeUtilizador) {
        this.janela = janela;
        this.app = app;
        this.serializacao = serializacao;

        initComponents();

        //Indica que a janela deve ser modal ou seja,
        //bloqueia a execução do programa até que a janela seja fechada
        this.setModal(true);

        this.setAlwaysOnTop(true);

        //Não permite o redimensionamento da janela
        this.setResizable(false);

        //Mostra a centralização da janela
        this.setLocationRelativeTo(null);

        //O processo de fecho da janela será controlado pelo programa
        this.setDefaultCloseOperation(DISPOSE_ON_CLOSE);

        managerUtilizador = app.getManagerUtilizador();

        if (nomeUtilizador == null) {
            operacao = ManagerUtilizador.OPERACAO_ADICIONAR;
            setTitle("Adicionar Utilizador");
            campoUtilizadorNome.setEditable(true);
            campoUtilizadorNovaPassword.setVisible(false);
            campoUtilizadorValidarPassword.setVisible(true);
            Password1.setVisible(false);
            Password2.setVisible(true);
        } else {
            operacao = ManagerUtilizador.OPERACAO_EDITAR;
            setTitle("Editar Utilizador");
            utilizador = (Utilizador) app.getManagerUtilizador().getLista().get(nomeUtilizador);
            campoUtilizadorNome.setText(utilizador.getNome());
            campoUtilizadorPassword.getText();
            campoUtilizadorNome.setEditable(false);
            campoUtilizadorPassword.setEditable(true);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        botaoGuardar = new javax.swing.JButton();
        Nome = new javax.swing.JLabel();
        campoUtilizadorNome = new javax.swing.JTextField();
        Password = new javax.swing.JLabel();
        Password1 = new javax.swing.JLabel();
        Password2 = new javax.swing.JLabel();
        campoUtilizadorNovaPassword = new javax.swing.JPasswordField();
        campoUtilizadorValidarPassword = new javax.swing.JPasswordField();
        campoUtilizadorPassword = new javax.swing.JPasswordField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(350, 100));
        setPreferredSize(new java.awt.Dimension(350, 200));
        java.awt.GridBagLayout layout = new java.awt.GridBagLayout();
        layout.columnWidths = new int[] {0, 10, 0, 10, 0, 10, 0};
        layout.rowHeights = new int[] {0, 10, 0, 10, 0, 10, 0, 10, 0, 10, 0, 10, 0};
        getContentPane().setLayout(layout);

        botaoGuardar.setText("Guardar");
        botaoGuardar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                botaoGuardarMouseClicked(evt);
            }
        });
        botaoGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoGuardarActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        getContentPane().add(botaoGuardar, gridBagConstraints);

        Nome.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        Nome.setText("Nome");
        Nome.setMaximumSize(new java.awt.Dimension(150, 25));
        Nome.setMinimumSize(new java.awt.Dimension(150, 25));
        Nome.setPreferredSize(new java.awt.Dimension(150, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        getContentPane().add(Nome, gridBagConstraints);

        campoUtilizadorNome.setEditable(false);
        campoUtilizadorNome.setMinimumSize(new java.awt.Dimension(150, 25));
        campoUtilizadorNome.setPreferredSize(new java.awt.Dimension(150, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.ipadx = -5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        getContentPane().add(campoUtilizadorNome, gridBagConstraints);

        Password.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        Password.setText("Introduza Password");
        Password.setMaximumSize(new java.awt.Dimension(150, 25));
        Password.setMinimumSize(new java.awt.Dimension(150, 25));
        Password.setPreferredSize(new java.awt.Dimension(150, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        getContentPane().add(Password, gridBagConstraints);

        Password1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        Password1.setText("Nova Password");
        Password1.setMaximumSize(new java.awt.Dimension(150, 25));
        Password1.setMinimumSize(new java.awt.Dimension(150, 25));
        Password1.setPreferredSize(new java.awt.Dimension(150, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        getContentPane().add(Password1, gridBagConstraints);

        Password2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        Password2.setText("Validar Password");
        Password2.setMaximumSize(new java.awt.Dimension(150, 25));
        Password2.setMinimumSize(new java.awt.Dimension(150, 25));
        Password2.setPreferredSize(new java.awt.Dimension(150, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        getContentPane().add(Password2, gridBagConstraints);

        campoUtilizadorNovaPassword.setMinimumSize(new java.awt.Dimension(150, 25));
        campoUtilizadorNovaPassword.setPreferredSize(new java.awt.Dimension(150, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        getContentPane().add(campoUtilizadorNovaPassword, gridBagConstraints);

        campoUtilizadorValidarPassword.setMinimumSize(new java.awt.Dimension(150, 25));
        campoUtilizadorValidarPassword.setPreferredSize(new java.awt.Dimension(150, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.ipadx = -5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        getContentPane().add(campoUtilizadorValidarPassword, gridBagConstraints);

        campoUtilizadorPassword.setMinimumSize(new java.awt.Dimension(150, 25));
        campoUtilizadorPassword.setPreferredSize(new java.awt.Dimension(150, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.ipadx = -5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        getContentPane().add(campoUtilizadorPassword, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void botaoGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoGuardarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_botaoGuardarActionPerformed

    private void botaoGuardarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_botaoGuardarMouseClicked
        adicionarOuEditar();
    }//GEN-LAST:event_botaoGuardarMouseClicked

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Nome;
    private javax.swing.JLabel Password;
    private javax.swing.JLabel Password1;
    private javax.swing.JLabel Password2;
    private javax.swing.JButton botaoGuardar;
    private javax.swing.JTextField campoUtilizadorNome;
    private javax.swing.JPasswordField campoUtilizadorNovaPassword;
    private javax.swing.JPasswordField campoUtilizadorPassword;
    private javax.swing.JPasswordField campoUtilizadorValidarPassword;
    // End of variables declaration//GEN-END:variables

    private void adicionarOuEditar() {
        try {
            String nome = campoUtilizadorNome.getText();
            String password = campoUtilizadorPassword.getText();
            String novaPassword = campoUtilizadorNovaPassword.getText();
            String validarPassword = campoUtilizadorValidarPassword.getText();

            if (operacao.equals(ManagerUtilizador.OPERACAO_ADICIONAR)) {
                if (validarPassword.equals(campoUtilizadorPassword.getText())) {
                    managerUtilizador.adicionar(nome, password);
                } else {
                    mostrarAviso("As passwords não coincidem!");
                    return;
                }
            } else if (operacao.equals(ManagerUtilizador.OPERACAO_EDITAR)) {

                if (!validarPassword.equals(novaPassword)) {
                    mostrarAviso("As passwords não coincidem!");
                    return;
                }

                if (!password.equals(app.getUtilizadorAutenticado().getPassword())) {
                    mostrarAviso("Utilizador inválido!");
                    return;
                }

                utilizador.setPassword(novaPassword);
                managerUtilizador.editar(utilizador);
            }
            fechar();
        } catch (Exception ex) {
            mostrarAviso(ex.getMessage());
        }

    }

    /*
     * Métodos auxiliares genéricos
     */
    private void mostrarAviso(String aviso) {
        JOptionPane.showMessageDialog(rootPane, aviso);
    }

    private void fechar() {
        dispose();

        try {
            janela.atualizar();
        } catch (Exception e) {
            mostrarAviso("Dados guardados com sucesso!");
        }
        serializacao.guardar(app);

    }
    /*
     * FIM Métodos auxiliares genéricos
     */
}
